/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@looker";
exports.ids = ["vendor-chunks/@looker"];
exports.modules = {

/***/ "(ssr)/./node_modules/@looker/chatty/lib/client.js":
/*!***************************************************!*\
  !*** ./node_modules/@looker/chatty/lib/client.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChattyClient = exports.ChattyClientStates = void 0;\nvar debugLib = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/@looker/chatty/node_modules/debug/src/index.js\");\nvar client_messages_1 = __webpack_require__(/*! ./client_messages */ \"(ssr)/./node_modules/@looker/chatty/lib/client_messages.js\");\nvar host_messages_1 = __webpack_require__(/*! ./host_messages */ \"(ssr)/./node_modules/@looker/chatty/lib/host_messages.js\");\n__webpack_require__(/*! es6-promise/auto */ \"(ssr)/./node_modules/es6-promise/auto.js\"); // Polyfill only browsers without Promises\n/**\n * @private\n * Client connection status\n */\nvar ChattyClientStates;\n(function (ChattyClientStates) {\n    ChattyClientStates[ChattyClientStates[\"Connecting\"] = 0] = \"Connecting\";\n    ChattyClientStates[ChattyClientStates[\"Syn\"] = 1] = \"Syn\";\n    ChattyClientStates[ChattyClientStates[\"Connected\"] = 2] = \"Connected\";\n})(ChattyClientStates = exports.ChattyClientStates || (exports.ChattyClientStates = {}));\n/**\n * The client object for an iframe. The user should not create this object directly, it\n * is returned by the [[ChattyClientBuilder.build]] method.\n */\nvar ChattyClient = /** @class */ (function () {\n    /**\n     * @param builder The client builder that is responsible for constructing this object.\n     * @hidden\n     */\n    function ChattyClient(builder) {\n        this._clientWindow = window;\n        this._connection = null;\n        this._hostWindow = this._clientWindow.parent;\n        this._state = ChattyClientStates.Connecting;\n        this._sequence = 0;\n        this._receivers = {};\n        this._handlers = builder.handlers;\n        this._abortControllers = {};\n        this._targetOrigin = builder.targetOrigin;\n        this._defaultTimeout = builder.defaultTimeout;\n        this._channel = new MessageChannel();\n    }\n    Object.defineProperty(ChattyClient.prototype, \"connection\", {\n        /**\n         * @returns a Promise to an object that resolves when the host has acknowledged the connection.\n         */\n        get: function () {\n            return this._connection;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ChattyClient.prototype, \"isConnected\", {\n        /**\n         * @returns a flag indicating whether the client has successfully connected to the host.\n         */\n        get: function () {\n            return this._state === ChattyClientStates.Connected;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Connects to the host window.\n     * @returns a Promise to an object that resolves when the host has acknowledged the connection. The\n     * object implements the [[ChattyClientConnection]] interface that can be used to talk to the host.\n     */\n    ChattyClient.prototype.connect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this._connection)\n                    return [2 /*return*/, this._connection];\n                this._connection = new Promise(function (resolve, reject) {\n                    _this._channel.port1.onmessage = function (evt) {\n                        ChattyClient._debug('received', evt.data.action, evt.data.data);\n                        switch (evt.data.action) {\n                            case host_messages_1.ChattyHostMessages.SynAck:\n                                _this._state = ChattyClientStates.Connected;\n                                _this.sendMsg(client_messages_1.ChattyClientMessages.Ack);\n                                resolve({\n                                    send: function (eventName) {\n                                        var payload = [];\n                                        for (var _i = 1; _i < arguments.length; _i++) {\n                                            payload[_i - 1] = arguments[_i];\n                                        }\n                                        _this.sendMsg(client_messages_1.ChattyClientMessages.Message, {\n                                            eventName: eventName,\n                                            payload: payload,\n                                        });\n                                    },\n                                    sendAndReceive: function (eventName) {\n                                        var _payload = [];\n                                        for (var _i = 1; _i < arguments.length; _i++) {\n                                            _payload[_i - 1] = arguments[_i];\n                                        }\n                                        return __awaiter(_this, void 0, void 0, function () {\n                                            var signal, propagateSignal, payload, options, sequence;\n                                            var _this = this;\n                                            var _a, _b;\n                                            return __generator(this, function (_c) {\n                                                if (_payload.length > 0 &&\n                                                    ((_a = _payload[_payload.length - 1]) === null || _a === void 0 ? void 0 : _a.signal) &&\n                                                    ((_b = _payload[_payload.length - 1]) === null || _b === void 0 ? void 0 : _b.signal) instanceof AbortSignal) {\n                                                    options = _payload[_payload.length - 1];\n                                                    signal = options.signal;\n                                                    propagateSignal = options.propagateSignal;\n                                                    payload = _payload.slice(0, _payload.length - 1);\n                                                }\n                                                else {\n                                                    payload = _payload;\n                                                }\n                                                sequence = ++this._sequence;\n                                                this.sendMsg(client_messages_1.ChattyClientMessages.MessageWithResponse, { eventName: eventName, payload: payload }, sequence, propagateSignal);\n                                                return [2 /*return*/, new Promise(function (resolve, reject) {\n                                                        var timeoutId;\n                                                        if (signal) {\n                                                            signal.addEventListener('abort', function (event) {\n                                                                var errorMessage = event.target.reason;\n                                                                if (typeof errorMessage !== 'string') {\n                                                                    errorMessage = 'Abort';\n                                                                }\n                                                                if (propagateSignal) {\n                                                                    _this.sendMsg(client_messages_1.ChattyClientMessages.AbortMessage, {\n                                                                        eventName: eventName,\n                                                                        payload: { reason: errorMessage },\n                                                                    }, sequence);\n                                                                }\n                                                                delete _this._receivers[sequence];\n                                                                reject(new Error(errorMessage));\n                                                            });\n                                                        }\n                                                        else {\n                                                            if (_this._defaultTimeout > -1) {\n                                                                timeoutId = setTimeout(function () {\n                                                                    delete _this._receivers[sequence];\n                                                                    reject(new Error('Timeout'));\n                                                                }, _this._defaultTimeout);\n                                                            }\n                                                        }\n                                                        _this._receivers[sequence] = { reject: reject, resolve: resolve, timeoutId: timeoutId };\n                                                    })];\n                                            });\n                                        });\n                                    },\n                                });\n                                break;\n                            case host_messages_1.ChattyHostMessages.Message:\n                                if (_this._handlers[evt.data.data.eventName]) {\n                                    _this._handlers[evt.data.data.eventName].forEach(function (fn) {\n                                        return fn.apply(_this, evt.data.data.payload);\n                                    });\n                                }\n                                break;\n                            case host_messages_1.ChattyHostMessages.MessageWithResponse:\n                                {\n                                    var _a = evt.data.data, eventName_1 = _a.eventName, payload = _a.payload, sequence_1 = _a.sequence, signal = _a.signal;\n                                    var results = [];\n                                    var abortStoreName_1 = \"\".concat(eventName_1).concat(sequence_1);\n                                    if (_this._handlers[eventName_1]) {\n                                        var _payload_1;\n                                        if (signal) {\n                                            _this._abortControllers[abortStoreName_1] = new AbortController();\n                                            if (Array.isArray(payload)) {\n                                                _payload_1 = __spreadArray(__spreadArray([], payload, true), [\n                                                    _this._abortControllers[abortStoreName_1].signal,\n                                                ], false);\n                                            }\n                                            else {\n                                                _payload_1 = [\n                                                    payload,\n                                                    _this._abortControllers[abortStoreName_1].signal,\n                                                ];\n                                            }\n                                        }\n                                        else {\n                                            _payload_1 = payload;\n                                        }\n                                        results = _this._handlers[eventName_1].map(function (fn) {\n                                            return fn.apply(_this, _payload_1);\n                                        });\n                                    }\n                                    Promise.all(results)\n                                        .then(function (resolvedResults) {\n                                        delete _this._abortControllers[abortStoreName_1];\n                                        _this.sendMsg(client_messages_1.ChattyClientMessages.Response, { eventName: eventName_1, payload: resolvedResults }, sequence_1);\n                                    })\n                                        .catch(function (error) {\n                                        delete _this._abortControllers[abortStoreName_1];\n                                        _this.sendMsg(client_messages_1.ChattyClientMessages.ResponseError, { eventName: eventName_1, payload: error.toString() }, sequence_1);\n                                    });\n                                }\n                                break;\n                            case host_messages_1.ChattyHostMessages.AbortMessage:\n                                {\n                                    var _b = evt.data.data, eventName = _b.eventName, payload = _b.payload, sequence = _b.sequence;\n                                    var abortStoreName = \"\".concat(eventName).concat(sequence);\n                                    if (_this._abortControllers[abortStoreName]) {\n                                        _this._abortControllers[abortStoreName].abort(payload === null || payload === void 0 ? void 0 : payload.reason);\n                                        delete _this._abortControllers[abortStoreName];\n                                    }\n                                }\n                                break;\n                            case host_messages_1.ChattyHostMessages.Response:\n                                {\n                                    var receiver = _this._receivers[evt.data.data.sequence];\n                                    if (receiver) {\n                                        delete _this._receivers[evt.data.data.sequence];\n                                        if (receiver.timeoutId) {\n                                            clearTimeout(receiver.timeoutId);\n                                        }\n                                        receiver.resolve(evt.data.data.payload);\n                                    }\n                                }\n                                break;\n                            case host_messages_1.ChattyHostMessages.ResponseError:\n                                {\n                                    var receiver = _this._receivers[evt.data.data.sequence];\n                                    if (receiver) {\n                                        delete _this._receivers[evt.data.data.sequence];\n                                        if (receiver.timeoutId) {\n                                            clearTimeout(receiver.timeoutId);\n                                        }\n                                        receiver.reject(typeof evt.data.data.payload === 'string'\n                                            ? new Error(evt.data.data.payload)\n                                            : evt.data.data.payload);\n                                    }\n                                }\n                                break;\n                        }\n                    };\n                    _this.initiateHandshake();\n                });\n                return [2 /*return*/, this._connection];\n            });\n        });\n    };\n    ChattyClient.prototype.initiateHandshake = function () {\n        ChattyClient._debug('connecting to', this._targetOrigin);\n        this._hostWindow.postMessage({\n            action: client_messages_1.ChattyClientMessages.Syn,\n        }, this._targetOrigin, [this._channel.port2]);\n        this._state = ChattyClientStates.Syn;\n    };\n    ChattyClient.prototype.sendMsg = function (action, data, sequence, propagateSignal) {\n        if (data === void 0) { data = {}; }\n        var sequenceData = sequence ? { sequence: sequence } : {};\n        var signalData = propagateSignal === true ? { signal: propagateSignal } : {};\n        var dataWithSequence = __assign(__assign(__assign({}, data), sequenceData), signalData);\n        ChattyClient._debug('sending', action, dataWithSequence);\n        this._channel.port1.postMessage({ action: action, data: dataWithSequence });\n    };\n    ChattyClient._debug = debugLib('looker:chatty:client');\n    return ChattyClient;\n}());\nexports.ChattyClient = ChattyClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxvb2tlci9jaGF0dHkvbGliL2NsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxPQUFPO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxjQUFjLDZCQUE2QiwwQkFBMEIsY0FBYyxxQkFBcUI7QUFDeEcsaUJBQWlCLG9EQUFvRCxxRUFBcUUsY0FBYztBQUN4Six1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QyxtQ0FBbUMsU0FBUztBQUM1QyxtQ0FBbUMsV0FBVyxVQUFVO0FBQ3hELDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0EsOEdBQThHLE9BQU87QUFDckgsaUZBQWlGLGlCQUFpQjtBQUNsRyx5REFBeUQsZ0JBQWdCLFFBQVE7QUFDakYsK0NBQStDLGdCQUFnQixnQkFBZ0I7QUFDL0U7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLFVBQVUsWUFBWSxhQUFhLFNBQVMsVUFBVTtBQUN0RCxvQ0FBb0MsU0FBUztBQUM3QztBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsT0FBTztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRywwQkFBMEI7QUFDakQsZUFBZSxtQkFBTyxDQUFDLGtGQUFPO0FBQzlCLHdCQUF3QixtQkFBTyxDQUFDLHFGQUFtQjtBQUNuRCxzQkFBc0IsbUJBQU8sQ0FBQyxpRkFBaUI7QUFDL0MsbUJBQU8sQ0FBQyxrRUFBa0IsR0FBRztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNEQUFzRCwwQkFBMEIsS0FBSztBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCx1QkFBdUI7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBLHlEQUF5RCx1QkFBdUI7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwySEFBMkgsd0NBQXdDO0FBQ25LO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRkFBbUYsc0JBQXNCO0FBQ3pHLHFFQUFxRTtBQUNyRTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQSx1RkFBdUY7QUFDdkYscURBQXFEO0FBQ3JELDZDQUE2QztBQUM3Qyx5Q0FBeUM7QUFDekMscUNBQXFDO0FBQ3JDLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUdBQXlHLGtEQUFrRDtBQUMzSixxQ0FBcUM7QUFDckM7QUFDQTtBQUNBLDhHQUE4RyxtREFBbUQ7QUFDaksscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLHdDQUF3QyxxQkFBcUI7QUFDN0Qsc0RBQXNELDBCQUEwQjtBQUNoRiw0REFBNEQ7QUFDNUQ7QUFDQSwwQ0FBMEMsd0NBQXdDO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxvQkFBb0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb21pbmEvRGVza3RvcC9sZWFmeUZhY3RvcnkvbGVhZnlfZmFjdG9yeS9mcm9udGVuZC9zcmMvbm9kZV9tb2R1bGVzL0Bsb29rZXIvY2hhdHR5L2xpYi9jbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuXG4gTUlUIExpY2Vuc2VcblxuIENvcHlyaWdodCAoYykgMjAyMSBMb29rZXIgRGF0YSBTY2llbmNlcywgSW5jLlxuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gU09GVFdBUkUuXG5cbiAqL1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tLCBwYWNrKSB7XG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNoYXR0eUNsaWVudCA9IGV4cG9ydHMuQ2hhdHR5Q2xpZW50U3RhdGVzID0gdm9pZCAwO1xudmFyIGRlYnVnTGliID0gcmVxdWlyZShcImRlYnVnXCIpO1xudmFyIGNsaWVudF9tZXNzYWdlc18xID0gcmVxdWlyZShcIi4vY2xpZW50X21lc3NhZ2VzXCIpO1xudmFyIGhvc3RfbWVzc2FnZXNfMSA9IHJlcXVpcmUoXCIuL2hvc3RfbWVzc2FnZXNcIik7XG5yZXF1aXJlKFwiZXM2LXByb21pc2UvYXV0b1wiKTsgLy8gUG9seWZpbGwgb25seSBicm93c2VycyB3aXRob3V0IFByb21pc2VzXG4vKipcbiAqIEBwcml2YXRlXG4gKiBDbGllbnQgY29ubmVjdGlvbiBzdGF0dXNcbiAqL1xudmFyIENoYXR0eUNsaWVudFN0YXRlcztcbihmdW5jdGlvbiAoQ2hhdHR5Q2xpZW50U3RhdGVzKSB7XG4gICAgQ2hhdHR5Q2xpZW50U3RhdGVzW0NoYXR0eUNsaWVudFN0YXRlc1tcIkNvbm5lY3RpbmdcIl0gPSAwXSA9IFwiQ29ubmVjdGluZ1wiO1xuICAgIENoYXR0eUNsaWVudFN0YXRlc1tDaGF0dHlDbGllbnRTdGF0ZXNbXCJTeW5cIl0gPSAxXSA9IFwiU3luXCI7XG4gICAgQ2hhdHR5Q2xpZW50U3RhdGVzW0NoYXR0eUNsaWVudFN0YXRlc1tcIkNvbm5lY3RlZFwiXSA9IDJdID0gXCJDb25uZWN0ZWRcIjtcbn0pKENoYXR0eUNsaWVudFN0YXRlcyA9IGV4cG9ydHMuQ2hhdHR5Q2xpZW50U3RhdGVzIHx8IChleHBvcnRzLkNoYXR0eUNsaWVudFN0YXRlcyA9IHt9KSk7XG4vKipcbiAqIFRoZSBjbGllbnQgb2JqZWN0IGZvciBhbiBpZnJhbWUuIFRoZSB1c2VyIHNob3VsZCBub3QgY3JlYXRlIHRoaXMgb2JqZWN0IGRpcmVjdGx5LCBpdFxuICogaXMgcmV0dXJuZWQgYnkgdGhlIFtbQ2hhdHR5Q2xpZW50QnVpbGRlci5idWlsZF1dIG1ldGhvZC5cbiAqL1xudmFyIENoYXR0eUNsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYnVpbGRlciBUaGUgY2xpZW50IGJ1aWxkZXIgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgY29uc3RydWN0aW5nIHRoaXMgb2JqZWN0LlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBDaGF0dHlDbGllbnQoYnVpbGRlcikge1xuICAgICAgICB0aGlzLl9jbGllbnRXaW5kb3cgPSB3aW5kb3c7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICB0aGlzLl9ob3N0V2luZG93ID0gdGhpcy5fY2xpZW50V2luZG93LnBhcmVudDtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBDaGF0dHlDbGllbnRTdGF0ZXMuQ29ubmVjdGluZztcbiAgICAgICAgdGhpcy5fc2VxdWVuY2UgPSAwO1xuICAgICAgICB0aGlzLl9yZWNlaXZlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5faGFuZGxlcnMgPSBidWlsZGVyLmhhbmRsZXJzO1xuICAgICAgICB0aGlzLl9hYm9ydENvbnRyb2xsZXJzID0ge307XG4gICAgICAgIHRoaXMuX3RhcmdldE9yaWdpbiA9IGJ1aWxkZXIudGFyZ2V0T3JpZ2luO1xuICAgICAgICB0aGlzLl9kZWZhdWx0VGltZW91dCA9IGJ1aWxkZXIuZGVmYXVsdFRpbWVvdXQ7XG4gICAgICAgIHRoaXMuX2NoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENoYXR0eUNsaWVudC5wcm90b3R5cGUsIFwiY29ubmVjdGlvblwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcmV0dXJucyBhIFByb21pc2UgdG8gYW4gb2JqZWN0IHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgaG9zdCBoYXMgYWNrbm93bGVkZ2VkIHRoZSBjb25uZWN0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDaGF0dHlDbGllbnQucHJvdG90eXBlLCBcImlzQ29ubmVjdGVkXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEByZXR1cm5zIGEgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGNsaWVudCBoYXMgc3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZCB0byB0aGUgaG9zdC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlID09PSBDaGF0dHlDbGllbnRTdGF0ZXMuQ29ubmVjdGVkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQ29ubmVjdHMgdG8gdGhlIGhvc3Qgd2luZG93LlxuICAgICAqIEByZXR1cm5zIGEgUHJvbWlzZSB0byBhbiBvYmplY3QgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBob3N0IGhhcyBhY2tub3dsZWRnZWQgdGhlIGNvbm5lY3Rpb24uIFRoZVxuICAgICAqIG9iamVjdCBpbXBsZW1lbnRzIHRoZSBbW0NoYXR0eUNsaWVudENvbm5lY3Rpb25dXSBpbnRlcmZhY2UgdGhhdCBjYW4gYmUgdXNlZCB0byB0YWxrIHRvIHRoZSBob3N0LlxuICAgICAqL1xuICAgIENoYXR0eUNsaWVudC5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29ubmVjdGlvbilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMuX2Nvbm5lY3Rpb25dO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24gPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9jaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENoYXR0eUNsaWVudC5fZGVidWcoJ3JlY2VpdmVkJywgZXZ0LmRhdGEuYWN0aW9uLCBldnQuZGF0YS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZ0LmRhdGEuYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBob3N0X21lc3NhZ2VzXzEuQ2hhdHR5SG9zdE1lc3NhZ2VzLlN5bkFjazpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N0YXRlID0gQ2hhdHR5Q2xpZW50U3RhdGVzLkNvbm5lY3RlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2VuZE1zZyhjbGllbnRfbWVzc2FnZXNfMS5DaGF0dHlDbGllbnRNZXNzYWdlcy5BY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmQ6IGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF5bG9hZCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWRbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNlbmRNc2coY2xpZW50X21lc3NhZ2VzXzEuQ2hhdHR5Q2xpZW50TWVzc2FnZXMuTWVzc2FnZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudE5hbWU6IGV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kQW5kUmVjZWl2ZTogZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcGF5bG9hZCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wYXlsb2FkW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2lnbmFsLCBwcm9wYWdhdGVTaWduYWwsIHBheWxvYWQsIG9wdGlvbnMsIHNlcXVlbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3BheWxvYWQubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoX2EgPSBfcGF5bG9hZFtfcGF5bG9hZC5sZW5ndGggLSAxXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNpZ25hbCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKF9iID0gX3BheWxvYWRbX3BheWxvYWQubGVuZ3RoIC0gMV0pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zaWduYWwpIGluc3RhbmNlb2YgQWJvcnRTaWduYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0gX3BheWxvYWRbX3BheWxvYWQubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsID0gb3B0aW9ucy5zaWduYWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGFnYXRlU2lnbmFsID0gb3B0aW9ucy5wcm9wYWdhdGVTaWduYWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZCA9IF9wYXlsb2FkLnNsaWNlKDAsIF9wYXlsb2FkLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZCA9IF9wYXlsb2FkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2UgPSArK3RoaXMuX3NlcXVlbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kTXNnKGNsaWVudF9tZXNzYWdlc18xLkNoYXR0eUNsaWVudE1lc3NhZ2VzLk1lc3NhZ2VXaXRoUmVzcG9uc2UsIHsgZXZlbnROYW1lOiBldmVudE5hbWUsIHBheWxvYWQ6IHBheWxvYWQgfSwgc2VxdWVuY2UsIHByb3BhZ2F0ZVNpZ25hbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZW91dElkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2lnbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZXZlbnQudGFyZ2V0LnJlYXNvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yTWVzc2FnZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gJ0Fib3J0JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BhZ2F0ZVNpZ25hbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZW5kTXNnKGNsaWVudF9tZXNzYWdlc18xLkNoYXR0eUNsaWVudE1lc3NhZ2VzLkFib3J0TWVzc2FnZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lOiBldmVudE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7IHJlYXNvbjogZXJyb3JNZXNzYWdlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHNlcXVlbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLl9yZWNlaXZlcnNbc2VxdWVuY2VdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fZGVmYXVsdFRpbWVvdXQgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMuX3JlY2VpdmVyc1tzZXF1ZW5jZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1RpbWVvdXQnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgX3RoaXMuX2RlZmF1bHRUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcmVjZWl2ZXJzW3NlcXVlbmNlXSA9IHsgcmVqZWN0OiByZWplY3QsIHJlc29sdmU6IHJlc29sdmUsIHRpbWVvdXRJZDogdGltZW91dElkIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGhvc3RfbWVzc2FnZXNfMS5DaGF0dHlIb3N0TWVzc2FnZXMuTWVzc2FnZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9oYW5kbGVyc1tldnQuZGF0YS5kYXRhLmV2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9oYW5kbGVyc1tldnQuZGF0YS5kYXRhLmV2ZW50TmFtZV0uZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkoX3RoaXMsIGV2dC5kYXRhLmRhdGEucGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGhvc3RfbWVzc2FnZXNfMS5DaGF0dHlIb3N0TWVzc2FnZXMuTWVzc2FnZVdpdGhSZXNwb25zZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hID0gZXZ0LmRhdGEuZGF0YSwgZXZlbnROYW1lXzEgPSBfYS5ldmVudE5hbWUsIHBheWxvYWQgPSBfYS5wYXlsb2FkLCBzZXF1ZW5jZV8xID0gX2Euc2VxdWVuY2UsIHNpZ25hbCA9IF9hLnNpZ25hbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWJvcnRTdG9yZU5hbWVfMSA9IFwiXCIuY29uY2F0KGV2ZW50TmFtZV8xKS5jb25jYXQoc2VxdWVuY2VfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2hhbmRsZXJzW2V2ZW50TmFtZV8xXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcGF5bG9hZF8xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaWduYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2Fib3J0Q29udHJvbGxlcnNbYWJvcnRTdG9yZU5hbWVfMV0gPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBheWxvYWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcGF5bG9hZF8xID0gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBwYXlsb2FkLCB0cnVlKSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9hYm9ydENvbnRyb2xsZXJzW2Fib3J0U3RvcmVOYW1lXzFdLnNpZ25hbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wYXlsb2FkXzEgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fYWJvcnRDb250cm9sbGVyc1thYm9ydFN0b3JlTmFtZV8xXS5zaWduYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcGF5bG9hZF8xID0gcGF5bG9hZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IF90aGlzLl9oYW5kbGVyc1tldmVudE5hbWVfMV0ubWFwKGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkoX3RoaXMsIF9wYXlsb2FkXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwocmVzdWx0cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzb2x2ZWRSZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLl9hYm9ydENvbnRyb2xsZXJzW2Fib3J0U3RvcmVOYW1lXzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNlbmRNc2coY2xpZW50X21lc3NhZ2VzXzEuQ2hhdHR5Q2xpZW50TWVzc2FnZXMuUmVzcG9uc2UsIHsgZXZlbnROYW1lOiBldmVudE5hbWVfMSwgcGF5bG9hZDogcmVzb2x2ZWRSZXN1bHRzIH0sIHNlcXVlbmNlXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLl9hYm9ydENvbnRyb2xsZXJzW2Fib3J0U3RvcmVOYW1lXzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNlbmRNc2coY2xpZW50X21lc3NhZ2VzXzEuQ2hhdHR5Q2xpZW50TWVzc2FnZXMuUmVzcG9uc2VFcnJvciwgeyBldmVudE5hbWU6IGV2ZW50TmFtZV8xLCBwYXlsb2FkOiBlcnJvci50b1N0cmluZygpIH0sIHNlcXVlbmNlXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBob3N0X21lc3NhZ2VzXzEuQ2hhdHR5SG9zdE1lc3NhZ2VzLkFib3J0TWVzc2FnZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9iID0gZXZ0LmRhdGEuZGF0YSwgZXZlbnROYW1lID0gX2IuZXZlbnROYW1lLCBwYXlsb2FkID0gX2IucGF5bG9hZCwgc2VxdWVuY2UgPSBfYi5zZXF1ZW5jZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhYm9ydFN0b3JlTmFtZSA9IFwiXCIuY29uY2F0KGV2ZW50TmFtZSkuY29uY2F0KHNlcXVlbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fYWJvcnRDb250cm9sbGVyc1thYm9ydFN0b3JlTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fYWJvcnRDb250cm9sbGVyc1thYm9ydFN0b3JlTmFtZV0uYWJvcnQocGF5bG9hZCA9PT0gbnVsbCB8fCBwYXlsb2FkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXlsb2FkLnJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLl9hYm9ydENvbnRyb2xsZXJzW2Fib3J0U3RvcmVOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGhvc3RfbWVzc2FnZXNfMS5DaGF0dHlIb3N0TWVzc2FnZXMuUmVzcG9uc2U6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWNlaXZlciA9IF90aGlzLl9yZWNlaXZlcnNbZXZ0LmRhdGEuZGF0YS5zZXF1ZW5jZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjZWl2ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMuX3JlY2VpdmVyc1tldnQuZGF0YS5kYXRhLnNlcXVlbmNlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjZWl2ZXIudGltZW91dElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChyZWNlaXZlci50aW1lb3V0SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlci5yZXNvbHZlKGV2dC5kYXRhLmRhdGEucGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBob3N0X21lc3NhZ2VzXzEuQ2hhdHR5SG9zdE1lc3NhZ2VzLlJlc3BvbnNlRXJyb3I6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWNlaXZlciA9IF90aGlzLl9yZWNlaXZlcnNbZXZ0LmRhdGEuZGF0YS5zZXF1ZW5jZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjZWl2ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMuX3JlY2VpdmVyc1tldnQuZGF0YS5kYXRhLnNlcXVlbmNlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjZWl2ZXIudGltZW91dElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChyZWNlaXZlci50aW1lb3V0SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlci5yZWplY3QodHlwZW9mIGV2dC5kYXRhLmRhdGEucGF5bG9hZCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBuZXcgRXJyb3IoZXZ0LmRhdGEuZGF0YS5wYXlsb2FkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGV2dC5kYXRhLmRhdGEucGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmluaXRpYXRlSGFuZHNoYWtlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMuX2Nvbm5lY3Rpb25dO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ2hhdHR5Q2xpZW50LnByb3RvdHlwZS5pbml0aWF0ZUhhbmRzaGFrZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQ2hhdHR5Q2xpZW50Ll9kZWJ1ZygnY29ubmVjdGluZyB0bycsIHRoaXMuX3RhcmdldE9yaWdpbik7XG4gICAgICAgIHRoaXMuX2hvc3RXaW5kb3cucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgYWN0aW9uOiBjbGllbnRfbWVzc2FnZXNfMS5DaGF0dHlDbGllbnRNZXNzYWdlcy5TeW4sXG4gICAgICAgIH0sIHRoaXMuX3RhcmdldE9yaWdpbiwgW3RoaXMuX2NoYW5uZWwucG9ydDJdKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBDaGF0dHlDbGllbnRTdGF0ZXMuU3luO1xuICAgIH07XG4gICAgQ2hhdHR5Q2xpZW50LnByb3RvdHlwZS5zZW5kTXNnID0gZnVuY3Rpb24gKGFjdGlvbiwgZGF0YSwgc2VxdWVuY2UsIHByb3BhZ2F0ZVNpZ25hbCkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdm9pZCAwKSB7IGRhdGEgPSB7fTsgfVxuICAgICAgICB2YXIgc2VxdWVuY2VEYXRhID0gc2VxdWVuY2UgPyB7IHNlcXVlbmNlOiBzZXF1ZW5jZSB9IDoge307XG4gICAgICAgIHZhciBzaWduYWxEYXRhID0gcHJvcGFnYXRlU2lnbmFsID09PSB0cnVlID8geyBzaWduYWw6IHByb3BhZ2F0ZVNpZ25hbCB9IDoge307XG4gICAgICAgIHZhciBkYXRhV2l0aFNlcXVlbmNlID0gX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oe30sIGRhdGEpLCBzZXF1ZW5jZURhdGEpLCBzaWduYWxEYXRhKTtcbiAgICAgICAgQ2hhdHR5Q2xpZW50Ll9kZWJ1Zygnc2VuZGluZycsIGFjdGlvbiwgZGF0YVdpdGhTZXF1ZW5jZSk7XG4gICAgICAgIHRoaXMuX2NoYW5uZWwucG9ydDEucG9zdE1lc3NhZ2UoeyBhY3Rpb246IGFjdGlvbiwgZGF0YTogZGF0YVdpdGhTZXF1ZW5jZSB9KTtcbiAgICB9O1xuICAgIENoYXR0eUNsaWVudC5fZGVidWcgPSBkZWJ1Z0xpYignbG9va2VyOmNoYXR0eTpjbGllbnQnKTtcbiAgICByZXR1cm4gQ2hhdHR5Q2xpZW50O1xufSgpKTtcbmV4cG9ydHMuQ2hhdHR5Q2xpZW50ID0gQ2hhdHR5Q2xpZW50O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@looker/chatty/lib/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@looker/chatty/lib/client_builder.js":
/*!***********************************************************!*\
  !*** ./node_modules/@looker/chatty/lib/client_builder.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChattyClientBuilder = void 0;\nvar client_1 = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/@looker/chatty/lib/client.js\");\n/**\n * Provides methods to define the properties of a [[ChattyClient]]\n */\nvar ChattyClientBuilder = /** @class */ (function () {\n    function ChattyClientBuilder() {\n        this._targetOrigin = '*';\n        this._handlers = {};\n        this._defaultTimeout = 30000;\n    }\n    Object.defineProperty(ChattyClientBuilder.prototype, \"targetOrigin\", {\n        get: function () {\n            return this._targetOrigin;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ChattyClientBuilder.prototype, \"handlers\", {\n        get: function () {\n            return this._handlers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ChattyClientBuilder.prototype, \"defaultTimeout\", {\n        get: function () {\n            return this._defaultTimeout;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Removes an event handler to the client.\n     *\n     * @param name Event name\n     * @param fn Callback function to remove\n     * @returns the client builder\n     */\n    ChattyClientBuilder.prototype.off = function (name, fn) {\n        if (this._handlers[name]) {\n            this._handlers[name] = this._handlers[name].filter(function (handler) { return handler !== fn; });\n        }\n    };\n    /**\n     * Adds an event handler to the client.\n     *\n     * @param name Event name to which to listen.\n     * @param fn Callback function that is invoked when the event\n     * is received, and accepts any parameters that were passed with the event.\n     * If the event received is sent using [[ChattyHostConnection.sendAndReceive]], its return value is\n     * included in the array that will be passed to the resolved promise.\n     * @returns the client builder\n     */\n    ChattyClientBuilder.prototype.on = function (name, fn) {\n        this._handlers[name] = this._handlers[name] || [];\n        this._handlers[name].push(fn);\n        return this;\n    };\n    /**\n     * Sets the default period of time a [[ChattyClientConnection.sendAndReceive]] message will wait.\n     * Use a negative number to wait indefinitely.\n     * The default is 30000ms\n     *\n     * @param timeout in milliseconds\n     * @returns the client builder\n     */\n    ChattyClientBuilder.prototype.withDefaultTimeout = function (timeout) {\n        this._defaultTimeout = timeout;\n        return this;\n    };\n    /**\n     * Optional. Sets the target origin parameter used to communicate with the host. Default\n     * is '*'. If possible it should be set the the host window's origin.\n     *\n     * @param targetOrigin targetOrigin to use with postMessage()\n     * @returns the client builder\n     */\n    ChattyClientBuilder.prototype.withTargetOrigin = function (targetOrigin) {\n        this._targetOrigin = targetOrigin;\n        return this;\n    };\n    /**\n     * Builds a [[ChattyClient]] with the provided properties.\n     * @returns a new Chatty client.\n     */\n    ChattyClientBuilder.prototype.build = function () {\n        return new client_1.ChattyClient(this);\n    };\n    return ChattyClientBuilder;\n}());\nexports.ChattyClientBuilder = ChattyClientBuilder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxvb2tlci9jaGF0dHkvbGliL2NsaWVudF9idWlsZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCLGVBQWUsbUJBQU8sQ0FBQyxtRUFBVTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0Ysd0JBQXdCO0FBQzVHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCwyQkFBMkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb21pbmEvRGVza3RvcC9sZWFmeUZhY3RvcnkvbGVhZnlfZmFjdG9yeS9mcm9udGVuZC9zcmMvbm9kZV9tb2R1bGVzL0Bsb29rZXIvY2hhdHR5L2xpYi9jbGllbnRfYnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG5cbiBNSVQgTGljZW5zZVxuXG4gQ29weXJpZ2h0IChjKSAyMDIxIExvb2tlciBEYXRhIFNjaWVuY2VzLCBJbmMuXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiBTT0ZUV0FSRS5cblxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNoYXR0eUNsaWVudEJ1aWxkZXIgPSB2b2lkIDA7XG52YXIgY2xpZW50XzEgPSByZXF1aXJlKFwiLi9jbGllbnRcIik7XG4vKipcbiAqIFByb3ZpZGVzIG1ldGhvZHMgdG8gZGVmaW5lIHRoZSBwcm9wZXJ0aWVzIG9mIGEgW1tDaGF0dHlDbGllbnRdXVxuICovXG52YXIgQ2hhdHR5Q2xpZW50QnVpbGRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDaGF0dHlDbGllbnRCdWlsZGVyKCkge1xuICAgICAgICB0aGlzLl90YXJnZXRPcmlnaW4gPSAnKic7XG4gICAgICAgIHRoaXMuX2hhbmRsZXJzID0ge307XG4gICAgICAgIHRoaXMuX2RlZmF1bHRUaW1lb3V0ID0gMzAwMDA7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDaGF0dHlDbGllbnRCdWlsZGVyLnByb3RvdHlwZSwgXCJ0YXJnZXRPcmlnaW5cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90YXJnZXRPcmlnaW47XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2hhdHR5Q2xpZW50QnVpbGRlci5wcm90b3R5cGUsIFwiaGFuZGxlcnNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVycztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDaGF0dHlDbGllbnRCdWlsZGVyLnByb3RvdHlwZSwgXCJkZWZhdWx0VGltZW91dFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRUaW1lb3V0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSBFdmVudCBuYW1lXG4gICAgICogQHBhcmFtIGZuIENhbGxiYWNrIGZ1bmN0aW9uIHRvIHJlbW92ZVxuICAgICAqIEByZXR1cm5zIHRoZSBjbGllbnQgYnVpbGRlclxuICAgICAqL1xuICAgIENoYXR0eUNsaWVudEJ1aWxkZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xuICAgICAgICBpZiAodGhpcy5faGFuZGxlcnNbbmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZXJzW25hbWVdID0gdGhpcy5faGFuZGxlcnNbbmFtZV0uZmlsdGVyKGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBoYW5kbGVyICE9PSBmbjsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgY2xpZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgRXZlbnQgbmFtZSB0byB3aGljaCB0byBsaXN0ZW4uXG4gICAgICogQHBhcmFtIGZuIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgaW52b2tlZCB3aGVuIHRoZSBldmVudFxuICAgICAqIGlzIHJlY2VpdmVkLCBhbmQgYWNjZXB0cyBhbnkgcGFyYW1ldGVycyB0aGF0IHdlcmUgcGFzc2VkIHdpdGggdGhlIGV2ZW50LlxuICAgICAqIElmIHRoZSBldmVudCByZWNlaXZlZCBpcyBzZW50IHVzaW5nIFtbQ2hhdHR5SG9zdENvbm5lY3Rpb24uc2VuZEFuZFJlY2VpdmVdXSwgaXRzIHJldHVybiB2YWx1ZSBpc1xuICAgICAqIGluY2x1ZGVkIGluIHRoZSBhcnJheSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSByZXNvbHZlZCBwcm9taXNlLlxuICAgICAqIEByZXR1cm5zIHRoZSBjbGllbnQgYnVpbGRlclxuICAgICAqL1xuICAgIENoYXR0eUNsaWVudEJ1aWxkZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKG5hbWUsIGZuKSB7XG4gICAgICAgIHRoaXMuX2hhbmRsZXJzW25hbWVdID0gdGhpcy5faGFuZGxlcnNbbmFtZV0gfHwgW107XG4gICAgICAgIHRoaXMuX2hhbmRsZXJzW25hbWVdLnB1c2goZm4pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRlZmF1bHQgcGVyaW9kIG9mIHRpbWUgYSBbW0NoYXR0eUNsaWVudENvbm5lY3Rpb24uc2VuZEFuZFJlY2VpdmVdXSBtZXNzYWdlIHdpbGwgd2FpdC5cbiAgICAgKiBVc2UgYSBuZWdhdGl2ZSBudW1iZXIgdG8gd2FpdCBpbmRlZmluaXRlbHkuXG4gICAgICogVGhlIGRlZmF1bHQgaXMgMzAwMDBtc1xuICAgICAqXG4gICAgICogQHBhcmFtIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzXG4gICAgICogQHJldHVybnMgdGhlIGNsaWVudCBidWlsZGVyXG4gICAgICovXG4gICAgQ2hhdHR5Q2xpZW50QnVpbGRlci5wcm90b3R5cGUud2l0aERlZmF1bHRUaW1lb3V0ID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgICAgICAgdGhpcy5fZGVmYXVsdFRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsLiBTZXRzIHRoZSB0YXJnZXQgb3JpZ2luIHBhcmFtZXRlciB1c2VkIHRvIGNvbW11bmljYXRlIHdpdGggdGhlIGhvc3QuIERlZmF1bHRcbiAgICAgKiBpcyAnKicuIElmIHBvc3NpYmxlIGl0IHNob3VsZCBiZSBzZXQgdGhlIHRoZSBob3N0IHdpbmRvdydzIG9yaWdpbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YXJnZXRPcmlnaW4gdGFyZ2V0T3JpZ2luIHRvIHVzZSB3aXRoIHBvc3RNZXNzYWdlKClcbiAgICAgKiBAcmV0dXJucyB0aGUgY2xpZW50IGJ1aWxkZXJcbiAgICAgKi9cbiAgICBDaGF0dHlDbGllbnRCdWlsZGVyLnByb3RvdHlwZS53aXRoVGFyZ2V0T3JpZ2luID0gZnVuY3Rpb24gKHRhcmdldE9yaWdpbikge1xuICAgICAgICB0aGlzLl90YXJnZXRPcmlnaW4gPSB0YXJnZXRPcmlnaW47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQnVpbGRzIGEgW1tDaGF0dHlDbGllbnRdXSB3aXRoIHRoZSBwcm92aWRlZCBwcm9wZXJ0aWVzLlxuICAgICAqIEByZXR1cm5zIGEgbmV3IENoYXR0eSBjbGllbnQuXG4gICAgICovXG4gICAgQ2hhdHR5Q2xpZW50QnVpbGRlci5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgY2xpZW50XzEuQ2hhdHR5Q2xpZW50KHRoaXMpO1xuICAgIH07XG4gICAgcmV0dXJuIENoYXR0eUNsaWVudEJ1aWxkZXI7XG59KCkpO1xuZXhwb3J0cy5DaGF0dHlDbGllbnRCdWlsZGVyID0gQ2hhdHR5Q2xpZW50QnVpbGRlcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@looker/chatty/lib/client_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@looker/chatty/lib/client_messages.js":
/*!************************************************************!*\
  !*** ./node_modules/@looker/chatty/lib/client_messages.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChattyClientMessages = void 0;\n/**\n * The recognized set of events that are sent from the client to the host.\n * @private\n */\n// IMPORTANT - ALWAYS add new members at the END of the enum. Failure to do\n// so will break interaction with a different version of chatty.\nvar ChattyClientMessages;\n(function (ChattyClientMessages) {\n    /** First part of handshake message */\n    ChattyClientMessages[ChattyClientMessages[\"Syn\"] = 0] = \"Syn\";\n    /** Final part of handshake message */\n    ChattyClientMessages[ChattyClientMessages[\"Ack\"] = 1] = \"Ack\";\n    /** Normal message */\n    ChattyClientMessages[ChattyClientMessages[\"Message\"] = 2] = \"Message\";\n    /** Message that expects a response */\n    ChattyClientMessages[ChattyClientMessages[\"MessageWithResponse\"] = 3] = \"MessageWithResponse\";\n    /** Response */\n    ChattyClientMessages[ChattyClientMessages[\"Response\"] = 4] = \"Response\";\n    /** Asynchronous error response */\n    ChattyClientMessages[ChattyClientMessages[\"ResponseError\"] = 5] = \"ResponseError\";\n    /** Abort message */\n    ChattyClientMessages[ChattyClientMessages[\"AbortMessage\"] = 6] = \"AbortMessage\";\n})(ChattyClientMessages = exports.ChattyClientMessages || (exports.ChattyClientMessages = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxvb2tlci9jaGF0dHkvbGliL2NsaWVudF9tZXNzYWdlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMERBQTBELDRCQUE0QixLQUFLIiwic291cmNlcyI6WyIvVXNlcnMvcm9taW5hL0Rlc2t0b3AvbGVhZnlGYWN0b3J5L2xlYWZ5X2ZhY3RvcnkvZnJvbnRlbmQvc3JjL25vZGVfbW9kdWxlcy9AbG9va2VyL2NoYXR0eS9saWIvY2xpZW50X21lc3NhZ2VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcblxuIE1JVCBMaWNlbnNlXG5cbiBDb3B5cmlnaHQgKGMpIDIwMjEgTG9va2VyIERhdGEgU2NpZW5jZXMsIEluYy5cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuIFNPRlRXQVJFLlxuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2hhdHR5Q2xpZW50TWVzc2FnZXMgPSB2b2lkIDA7XG4vKipcbiAqIFRoZSByZWNvZ25pemVkIHNldCBvZiBldmVudHMgdGhhdCBhcmUgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIGhvc3QuXG4gKiBAcHJpdmF0ZVxuICovXG4vLyBJTVBPUlRBTlQgLSBBTFdBWVMgYWRkIG5ldyBtZW1iZXJzIGF0IHRoZSBFTkQgb2YgdGhlIGVudW0uIEZhaWx1cmUgdG8gZG9cbi8vIHNvIHdpbGwgYnJlYWsgaW50ZXJhY3Rpb24gd2l0aCBhIGRpZmZlcmVudCB2ZXJzaW9uIG9mIGNoYXR0eS5cbnZhciBDaGF0dHlDbGllbnRNZXNzYWdlcztcbihmdW5jdGlvbiAoQ2hhdHR5Q2xpZW50TWVzc2FnZXMpIHtcbiAgICAvKiogRmlyc3QgcGFydCBvZiBoYW5kc2hha2UgbWVzc2FnZSAqL1xuICAgIENoYXR0eUNsaWVudE1lc3NhZ2VzW0NoYXR0eUNsaWVudE1lc3NhZ2VzW1wiU3luXCJdID0gMF0gPSBcIlN5blwiO1xuICAgIC8qKiBGaW5hbCBwYXJ0IG9mIGhhbmRzaGFrZSBtZXNzYWdlICovXG4gICAgQ2hhdHR5Q2xpZW50TWVzc2FnZXNbQ2hhdHR5Q2xpZW50TWVzc2FnZXNbXCJBY2tcIl0gPSAxXSA9IFwiQWNrXCI7XG4gICAgLyoqIE5vcm1hbCBtZXNzYWdlICovXG4gICAgQ2hhdHR5Q2xpZW50TWVzc2FnZXNbQ2hhdHR5Q2xpZW50TWVzc2FnZXNbXCJNZXNzYWdlXCJdID0gMl0gPSBcIk1lc3NhZ2VcIjtcbiAgICAvKiogTWVzc2FnZSB0aGF0IGV4cGVjdHMgYSByZXNwb25zZSAqL1xuICAgIENoYXR0eUNsaWVudE1lc3NhZ2VzW0NoYXR0eUNsaWVudE1lc3NhZ2VzW1wiTWVzc2FnZVdpdGhSZXNwb25zZVwiXSA9IDNdID0gXCJNZXNzYWdlV2l0aFJlc3BvbnNlXCI7XG4gICAgLyoqIFJlc3BvbnNlICovXG4gICAgQ2hhdHR5Q2xpZW50TWVzc2FnZXNbQ2hhdHR5Q2xpZW50TWVzc2FnZXNbXCJSZXNwb25zZVwiXSA9IDRdID0gXCJSZXNwb25zZVwiO1xuICAgIC8qKiBBc3luY2hyb25vdXMgZXJyb3IgcmVzcG9uc2UgKi9cbiAgICBDaGF0dHlDbGllbnRNZXNzYWdlc1tDaGF0dHlDbGllbnRNZXNzYWdlc1tcIlJlc3BvbnNlRXJyb3JcIl0gPSA1XSA9IFwiUmVzcG9uc2VFcnJvclwiO1xuICAgIC8qKiBBYm9ydCBtZXNzYWdlICovXG4gICAgQ2hhdHR5Q2xpZW50TWVzc2FnZXNbQ2hhdHR5Q2xpZW50TWVzc2FnZXNbXCJBYm9ydE1lc3NhZ2VcIl0gPSA2XSA9IFwiQWJvcnRNZXNzYWdlXCI7XG59KShDaGF0dHlDbGllbnRNZXNzYWdlcyA9IGV4cG9ydHMuQ2hhdHR5Q2xpZW50TWVzc2FnZXMgfHwgKGV4cG9ydHMuQ2hhdHR5Q2xpZW50TWVzc2FnZXMgPSB7fSkpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@looker/chatty/lib/client_messages.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@looker/chatty/lib/host.js":
/*!*************************************************!*\
  !*** ./node_modules/@looker/chatty/lib/host.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChattyHost = exports.ChattyHostStates = void 0;\nvar debugLib = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/@looker/chatty/node_modules/debug/src/index.js\");\nvar client_messages_1 = __webpack_require__(/*! ./client_messages */ \"(ssr)/./node_modules/@looker/chatty/lib/client_messages.js\");\nvar host_messages_1 = __webpack_require__(/*! ./host_messages */ \"(ssr)/./node_modules/@looker/chatty/lib/host_messages.js\");\n__webpack_require__(/*! es6-promise/auto */ \"(ssr)/./node_modules/es6-promise/auto.js\"); // Polyfill only browsers without Promises\n/**\n * @private\n * Host connection status\n */\nvar ChattyHostStates;\n(function (ChattyHostStates) {\n    ChattyHostStates[ChattyHostStates[\"Connecting\"] = 0] = \"Connecting\";\n    ChattyHostStates[ChattyHostStates[\"SynAck\"] = 1] = \"SynAck\";\n    ChattyHostStates[ChattyHostStates[\"Connected\"] = 2] = \"Connected\";\n})(ChattyHostStates = exports.ChattyHostStates || (exports.ChattyHostStates = {}));\n/**\n * The host object for an iframe. The user should not create this object directly, it\n * is returned by the [[ChattyHostBuilder.build]] method.\n */\nvar ChattyHost = /** @class */ (function () {\n    /**\n     * @param builder The client builder that is responsible for constructing this object.\n     * @hidden\n     */\n    function ChattyHost(builder) {\n        var _this = this;\n        this._hostWindow = window;\n        this._connection = null;\n        this._state = ChattyHostStates.Connecting;\n        this._sequence = 0;\n        this._receivers = {};\n        this.iframe = document.createElement('iframe');\n        builder.sandboxAttrs.forEach(function (attr) { return _this.iframe.sandbox.add(attr); });\n        if ('allow' in this.iframe) {\n            this.iframe.allow = builder.allowAttrs.join('; ');\n        }\n        // tslint:disable-next-line:deprecation\n        this.iframe.frameBorder = builder.getFrameBorder();\n        if (builder.url) {\n            this.iframe.src = builder.url;\n        }\n        else if (builder.source) {\n            this.iframe.srcdoc = builder.source;\n        }\n        else {\n            console.warn('url or source required to initialize Chatty host correctly');\n        }\n        this._appendTo = builder.el;\n        this._handlers = builder.handlers;\n        this._abortControllers = {};\n        this._port = null;\n        this._targetOrigin = builder.targetOrigin;\n        this._defaultTimeout = builder.defaultTimeout;\n    }\n    Object.defineProperty(ChattyHost.prototype, \"connection\", {\n        /**\n         * @returns a Promise to an object that resolves when the client initiates the connection.\n         */\n        get: function () {\n            return this._connection;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ChattyHost.prototype, \"isConnected\", {\n        /**\n         * @returns a flag indicating whether the client successfully connected to the host.\n         */\n        get: function () {\n            return this._state === ChattyHostStates.Connected;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Connects to the client iframe. Waits for the client iframe to load and initiate a\n     * connection using the chatty client.\n     *\n     * @returns a Promise to an object that resolves when the client has initiated the connection. The\n     * object implements the [[ChattyHostConnection]] that can be used to talk to the host.\n     */\n    ChattyHost.prototype.connect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var createConnection;\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this._connection)\n                    return [2 /*return*/, this._connection];\n                createConnection = function () { return __awaiter(_this, void 0, void 0, function () {\n                    var _this = this;\n                    return __generator(this, function (_a) {\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\n                                var eventListener = function (evt) {\n                                    ChattyHost._debug('port received', evt.data.action, evt.data.data);\n                                    switch (evt.data.action) {\n                                        case client_messages_1.ChattyClientMessages.Ack:\n                                            _this._state = ChattyHostStates.Connected;\n                                            resolve({\n                                                send: function (eventName) {\n                                                    var payload = [];\n                                                    for (var _i = 1; _i < arguments.length; _i++) {\n                                                        payload[_i - 1] = arguments[_i];\n                                                    }\n                                                    _this.sendMsg(host_messages_1.ChattyHostMessages.Message, {\n                                                        eventName: eventName,\n                                                        payload: payload,\n                                                    });\n                                                },\n                                                sendAndReceive: function (eventName) {\n                                                    var _payload = [];\n                                                    for (var _i = 1; _i < arguments.length; _i++) {\n                                                        _payload[_i - 1] = arguments[_i];\n                                                    }\n                                                    return __awaiter(_this, void 0, void 0, function () {\n                                                        var signal, propagateSignal, payload, options, sequence;\n                                                        var _this = this;\n                                                        var _a, _b;\n                                                        return __generator(this, function (_c) {\n                                                            if (_payload.length > 0 &&\n                                                                ((_a = _payload[_payload.length - 1]) === null || _a === void 0 ? void 0 : _a.signal) &&\n                                                                ((_b = _payload[_payload.length - 1]) === null || _b === void 0 ? void 0 : _b.signal) instanceof AbortSignal) {\n                                                                options = _payload[_payload.length - 1];\n                                                                signal = options.signal;\n                                                                propagateSignal = options.propagateSignal;\n                                                                payload = _payload.slice(0, _payload.length - 1);\n                                                            }\n                                                            else {\n                                                                payload = _payload;\n                                                            }\n                                                            sequence = ++this._sequence;\n                                                            this.sendMsg(host_messages_1.ChattyHostMessages.MessageWithResponse, { eventName: eventName, payload: payload }, sequence, propagateSignal);\n                                                            return [2 /*return*/, new Promise(function (resolve, reject) {\n                                                                    var timeoutId;\n                                                                    if (signal) {\n                                                                        signal.addEventListener('abort', function (event) {\n                                                                            if (propagateSignal) {\n                                                                                var errorMessage_1 = event.target\n                                                                                    .reason;\n                                                                                if (typeof errorMessage_1 !== 'string') {\n                                                                                    errorMessage_1 = 'Abort';\n                                                                                }\n                                                                                _this.sendMsg(host_messages_1.ChattyHostMessages.AbortMessage, {\n                                                                                    eventName: eventName,\n                                                                                    payload: { reason: errorMessage_1 },\n                                                                                }, sequence);\n                                                                            }\n                                                                            delete _this._receivers[sequence];\n                                                                            var errorMessage = event.target.reason;\n                                                                            if (typeof errorMessage !== 'string') {\n                                                                                errorMessage = 'Abort';\n                                                                            }\n                                                                            reject(new Error(errorMessage));\n                                                                        });\n                                                                    }\n                                                                    else {\n                                                                        if (_this._defaultTimeout > -1) {\n                                                                            timeoutId = setTimeout(function () {\n                                                                                delete _this._receivers[sequence];\n                                                                                reject(new Error('Timeout'));\n                                                                            }, _this._defaultTimeout);\n                                                                        }\n                                                                    }\n                                                                    _this._receivers[sequence] = { reject: reject, resolve: resolve, timeoutId: timeoutId };\n                                                                })];\n                                                        });\n                                                    });\n                                                },\n                                            });\n                                            break;\n                                        case client_messages_1.ChattyClientMessages.Message:\n                                            if (_this._handlers[evt.data.data.eventName]) {\n                                                _this._handlers[evt.data.data.eventName].forEach(function (fn) {\n                                                    return fn.apply(_this, evt.data.data.payload);\n                                                });\n                                            }\n                                            break;\n                                        case client_messages_1.ChattyClientMessages.MessageWithResponse:\n                                            {\n                                                var _a = evt.data.data, eventName_1 = _a.eventName, payload = _a.payload, sequence_1 = _a.sequence, signal = _a.signal;\n                                                var results = [];\n                                                var abortStoreName_1 = \"\".concat(eventName_1).concat(sequence_1);\n                                                if (_this._handlers[eventName_1]) {\n                                                    var _payload_1;\n                                                    if (signal) {\n                                                        _this._abortControllers[abortStoreName_1] =\n                                                            new AbortController();\n                                                        if (Array.isArray(payload)) {\n                                                            _payload_1 = __spreadArray(__spreadArray([], payload, true), [\n                                                                _this._abortControllers[abortStoreName_1].signal,\n                                                            ], false);\n                                                        }\n                                                        else {\n                                                            _payload_1 = [\n                                                                payload,\n                                                                _this._abortControllers[abortStoreName_1].signal,\n                                                            ];\n                                                        }\n                                                    }\n                                                    else {\n                                                        _payload_1 = payload;\n                                                    }\n                                                    results = _this._handlers[eventName_1].map(function (fn) {\n                                                        return fn.apply(_this, _payload_1);\n                                                    });\n                                                }\n                                                Promise.all(results)\n                                                    .then(function (resolvedResults) {\n                                                    delete _this._abortControllers[abortStoreName_1];\n                                                    _this.sendMsg(host_messages_1.ChattyHostMessages.Response, { eventName: eventName_1, payload: resolvedResults }, sequence_1);\n                                                })\n                                                    .catch(function (error) {\n                                                    delete _this._abortControllers[abortStoreName_1];\n                                                    _this.sendMsg(host_messages_1.ChattyHostMessages.ResponseError, { eventName: eventName_1, payload: error.toString() }, sequence_1);\n                                                });\n                                            }\n                                            break;\n                                        case client_messages_1.ChattyClientMessages.AbortMessage:\n                                            {\n                                                var _b = evt.data.data, eventName = _b.eventName, payload = _b.payload, sequence = _b.sequence;\n                                                var abortStoreName = \"\".concat(eventName).concat(sequence);\n                                                if (_this._abortControllers[abortStoreName]) {\n                                                    _this._abortControllers[abortStoreName].abort(payload === null || payload === void 0 ? void 0 : payload.reason);\n                                                    delete _this._abortControllers[abortStoreName];\n                                                }\n                                            }\n                                            break;\n                                        case client_messages_1.ChattyClientMessages.Response:\n                                            {\n                                                var receiver = _this._receivers[evt.data.data.sequence];\n                                                if (receiver) {\n                                                    delete _this._receivers[evt.data.data.sequence];\n                                                    if (receiver.timeoutId) {\n                                                        clearTimeout(receiver.timeoutId);\n                                                    }\n                                                    receiver.resolve(evt.data.data.payload);\n                                                }\n                                            }\n                                            break;\n                                        case client_messages_1.ChattyClientMessages.ResponseError:\n                                            {\n                                                var receiver = _this._receivers[evt.data.data.sequence];\n                                                if (receiver) {\n                                                    delete _this._receivers[evt.data.data.sequence];\n                                                    if (receiver.timeoutId) {\n                                                        clearTimeout(receiver.timeoutId);\n                                                    }\n                                                    receiver.reject(typeof evt.data.data.payload === 'string'\n                                                        ? new Error(evt.data.data.payload)\n                                                        : evt.data.data.payload);\n                                                }\n                                            }\n                                            break;\n                                    }\n                                };\n                                var windowListener = function (evt) {\n                                    if (!_this.isValidMsg(evt)) {\n                                        // don't reject here, since that breaks the promise resolution chain\n                                        ChattyHost._debug('window received invalid', evt);\n                                        return;\n                                    }\n                                    ChattyHost._debug('window received', evt.data.action, evt.data.data);\n                                    switch (evt.data.action) {\n                                        case client_messages_1.ChattyClientMessages.Syn:\n                                            if (_this._port) {\n                                                // If targetOrigin is set and we receive another Syn, the frame has potentially\n                                                // navigated to another valid webpage and we should re-connect\n                                                if ((_this._targetOrigin && _this._targetOrigin === '*') ||\n                                                    _this._targetOrigin === evt.origin) {\n                                                    ChattyHost._debug('reconnecting to', evt.origin);\n                                                    _this._port.close();\n                                                }\n                                                else {\n                                                    ChattyHost._debug('rejected new connection from', evt.origin);\n                                                    return;\n                                                }\n                                            }\n                                            _this._port = evt.ports[0];\n                                            _this._port.onmessage = eventListener;\n                                            _this.sendMsg(host_messages_1.ChattyHostMessages.SynAck);\n                                            _this._state = ChattyHostStates.SynAck;\n                                            break;\n                                    }\n                                };\n                                _this._hostWindow.addEventListener('message', windowListener);\n                            })];\n                    });\n                }); };\n                this._appendTo.appendChild(this.iframe);\n                return [2 /*return*/, (this._connection = createConnection())];\n            });\n        });\n    };\n    ChattyHost.prototype.sendMsg = function (action, data, sequence, propagateSignal) {\n        if (data === void 0) { data = {}; }\n        var sequenceData = sequence ? { sequence: sequence } : {};\n        var signalData = propagateSignal === true ? { signal: propagateSignal } : {};\n        var dataWithSequence = __assign(__assign(__assign({}, data), sequenceData), signalData);\n        ChattyHost._debug('sending', action, dataWithSequence);\n        this._port.postMessage({ action: action, data: dataWithSequence });\n    };\n    // TODO: natenate\n    // Frustratingly, enabling `allow-scripts` on a sandboxed iframe sets its origin to `'null'`\n    // (that is, a string literal with a value of null). This means that in order to `postMessage`\n    // to the client we must use `'*'` as the origin parameter.  To ensure messages received from\n    // the client are who they claim to be, we check the origin is `'null'` and the contentWindow\n    // is the one we have access to from the parent frame.  This method is described here:\n    // https://www.html5rocks.com/en/tutorials/security/sandboxed-iframes/#safely-sandboxing-eval\n    // If sandboxing is not enabled targetOrigin can be set and validated\n    ChattyHost.prototype.isValidMsg = function (evt) {\n        if (evt.source !== this.iframe.contentWindow)\n            return false;\n        if (this._targetOrigin &&\n            !(this._targetOrigin === '*' || this._targetOrigin === evt.origin))\n            return false;\n        return true;\n    };\n    ChattyHost._debug = debugLib('looker:chatty:host');\n    return ChattyHost;\n}());\nexports.ChattyHost = ChattyHost;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@looker/chatty/lib/host.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@looker/chatty/lib/host_builder.js":
/*!*********************************************************!*\
  !*** ./node_modules/@looker/chatty/lib/host_builder.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChattyHostBuilder = void 0;\nvar host_1 = __webpack_require__(/*! ./host */ \"(ssr)/./node_modules/@looker/chatty/lib/host.js\");\n/**\n * Provides methods to define the properties of a [[ChattyHost]]\n */\nvar ChattyHostBuilder = /** @class */ (function () {\n    /** @hidden */\n    function ChattyHostBuilder(_url, _source) {\n        this._url = _url;\n        this._source = _source;\n        this._appendTo = null;\n        this._handlers = {};\n        this._sandboxAttrs = [];\n        this._allowAttrs = [];\n        this._frameBorder = '0';\n        this._targetOrigin = null;\n        this._defaultTimeout = 30000;\n    }\n    Object.defineProperty(ChattyHostBuilder.prototype, \"el\", {\n        get: function () {\n            return this._appendTo || document.body;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ChattyHostBuilder.prototype, \"handlers\", {\n        get: function () {\n            return this._handlers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ChattyHostBuilder.prototype, \"sandboxAttrs\", {\n        get: function () {\n            return this._sandboxAttrs;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ChattyHostBuilder.prototype, \"allowAttrs\", {\n        get: function () {\n            return this._allowAttrs;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ChattyHostBuilder.prototype, \"targetOrigin\", {\n        get: function () {\n            return this._targetOrigin;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ChattyHostBuilder.prototype, \"url\", {\n        get: function () {\n            return this._url;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ChattyHostBuilder.prototype, \"source\", {\n        get: function () {\n            return this._source;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ChattyHostBuilder.prototype, \"defaultTimeout\", {\n        get: function () {\n            return this._defaultTimeout;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @param el the HTML element that the iframe will live inside. The iframe will be created as\n     * a direct child of the element.\n     * @returns the host builder\n     */\n    ChattyHostBuilder.prototype.appendTo = function (el) {\n        this._appendTo = el;\n        return this;\n    };\n    /**\n     * Removes an event handler to the host.\n     *\n     * @param name Event name\n     * @param fn Callback function to remove.\n     * @returns the host builder\n     */\n    ChattyHostBuilder.prototype.off = function (name, fn) {\n        if (this._handlers[name]) {\n            this._handlers[name] = this._handlers[name].filter(function (handler) { return handler !== fn; });\n        }\n    };\n    /**\n     * Adds an event handler to the host.\n     *\n     * @param name Event name to which to listen.\n     * @param fn Callback function that is invoked when the event\n     * is received, and accepts any parameters that were passed with the event. If the event\n     * received is sent using [[ChattyClientConnection.sendAndReceive]], its return value is included\n     * in the array that will be passed to the resolved promise.\n     * @returns the host builder\n     */\n    ChattyHostBuilder.prototype.on = function (name, fn) {\n        this._handlers[name] = this._handlers[name] || [];\n        this._handlers[name].push(fn);\n        return this;\n    };\n    /**\n     * Sets the default period of time a [[ChattyHostConnection.sendAndReceive]] message will wait.\n     * Use a negative number to wait indefinitely.\n     *\n     * @param timeout in milliseconds\n     * @returns the host builder\n     */\n    ChattyHostBuilder.prototype.withDefaultTimeout = function (timeout) {\n        this._defaultTimeout = timeout;\n        return this;\n    };\n    /** @deprecated The frame-board attribute is deprecated, use CSS instead */\n    ChattyHostBuilder.prototype.getFrameBorder = function () {\n        return this._frameBorder;\n    };\n    /** @deprecated The frame-board attribute is deprecated, use CSS instead */\n    ChattyHostBuilder.prototype.frameBorder = function (attr) {\n        this._frameBorder = attr;\n        return this;\n    };\n    /** @deprecated Replaced by [[withSandboxAttribute]] */\n    ChattyHostBuilder.prototype.sandbox = function (attr) {\n        this.withSandboxAttribute(attr);\n        return this;\n    };\n    /**\n     * Create the iframe with the given sandbox attribute\n     *\n     * @param attr The sandbox attribute\n     */\n    ChattyHostBuilder.prototype.withSandboxAttribute = function (attr) {\n        this._sandboxAttrs.push(attr);\n        return this;\n    };\n    /**\n     * Create the iframe with the given allow attribute\n     *\n     * @param attr The sandbox attribute\n     */\n    ChattyHostBuilder.prototype.withAllowAttribute = function (attr) {\n        this._allowAttrs.push(attr);\n        return this;\n    };\n    /**\n     * Use `targetOrigin` as the value for postMessage(). See\n     * [Window.postMessage()](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n     * for details.\n     *\n     * @param targetOrigin\n     */\n    ChattyHostBuilder.prototype.withTargetOrigin = function (targetOrigin) {\n        this._targetOrigin = targetOrigin;\n        return this;\n    };\n    /**\n     * Builds a [[ChattyHost]] with the provided properties.\n     */\n    ChattyHostBuilder.prototype.build = function () {\n        return new host_1.ChattyHost(this);\n    };\n    return ChattyHostBuilder;\n}());\nexports.ChattyHostBuilder = ChattyHostBuilder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@looker/chatty/lib/host_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@looker/chatty/lib/host_messages.js":
/*!**********************************************************!*\
  !*** ./node_modules/@looker/chatty/lib/host_messages.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChattyHostMessages = void 0;\n/**\n * The recognized set of messages that are sent from the host to the client.\n * @private\n */\n// IMPORTANT - ALWAYS add new members at the END of the enum. Failure to do\n// so will break interaction with a different version of chatty.\nvar ChattyHostMessages;\n(function (ChattyHostMessages) {\n    /** Acknowledge client connection */\n    ChattyHostMessages[ChattyHostMessages[\"SynAck\"] = 0] = \"SynAck\";\n    /** Normal message */\n    ChattyHostMessages[ChattyHostMessages[\"Message\"] = 1] = \"Message\";\n    /** Message that expects a response */\n    ChattyHostMessages[ChattyHostMessages[\"MessageWithResponse\"] = 2] = \"MessageWithResponse\";\n    /** Response  */\n    ChattyHostMessages[ChattyHostMessages[\"Response\"] = 3] = \"Response\";\n    /** Asynchronous error response */\n    ChattyHostMessages[ChattyHostMessages[\"ResponseError\"] = 4] = \"ResponseError\";\n    /** Abort message */\n    ChattyHostMessages[ChattyHostMessages[\"AbortMessage\"] = 5] = \"AbortMessage\";\n})(ChattyHostMessages = exports.ChattyHostMessages || (exports.ChattyHostMessages = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxvb2tlci9jaGF0dHkvbGliL2hvc3RfbWVzc2FnZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0RBQXNELDBCQUEwQixLQUFLIiwic291cmNlcyI6WyIvVXNlcnMvcm9taW5hL0Rlc2t0b3AvbGVhZnlGYWN0b3J5L2xlYWZ5X2ZhY3RvcnkvZnJvbnRlbmQvc3JjL25vZGVfbW9kdWxlcy9AbG9va2VyL2NoYXR0eS9saWIvaG9zdF9tZXNzYWdlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG5cbiBNSVQgTGljZW5zZVxuXG4gQ29weXJpZ2h0IChjKSAyMDIxIExvb2tlciBEYXRhIFNjaWVuY2VzLCBJbmMuXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiBTT0ZUV0FSRS5cblxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNoYXR0eUhvc3RNZXNzYWdlcyA9IHZvaWQgMDtcbi8qKlxuICogVGhlIHJlY29nbml6ZWQgc2V0IG9mIG1lc3NhZ2VzIHRoYXQgYXJlIHNlbnQgZnJvbSB0aGUgaG9zdCB0byB0aGUgY2xpZW50LlxuICogQHByaXZhdGVcbiAqL1xuLy8gSU1QT1JUQU5UIC0gQUxXQVlTIGFkZCBuZXcgbWVtYmVycyBhdCB0aGUgRU5EIG9mIHRoZSBlbnVtLiBGYWlsdXJlIHRvIGRvXG4vLyBzbyB3aWxsIGJyZWFrIGludGVyYWN0aW9uIHdpdGggYSBkaWZmZXJlbnQgdmVyc2lvbiBvZiBjaGF0dHkuXG52YXIgQ2hhdHR5SG9zdE1lc3NhZ2VzO1xuKGZ1bmN0aW9uIChDaGF0dHlIb3N0TWVzc2FnZXMpIHtcbiAgICAvKiogQWNrbm93bGVkZ2UgY2xpZW50IGNvbm5lY3Rpb24gKi9cbiAgICBDaGF0dHlIb3N0TWVzc2FnZXNbQ2hhdHR5SG9zdE1lc3NhZ2VzW1wiU3luQWNrXCJdID0gMF0gPSBcIlN5bkFja1wiO1xuICAgIC8qKiBOb3JtYWwgbWVzc2FnZSAqL1xuICAgIENoYXR0eUhvc3RNZXNzYWdlc1tDaGF0dHlIb3N0TWVzc2FnZXNbXCJNZXNzYWdlXCJdID0gMV0gPSBcIk1lc3NhZ2VcIjtcbiAgICAvKiogTWVzc2FnZSB0aGF0IGV4cGVjdHMgYSByZXNwb25zZSAqL1xuICAgIENoYXR0eUhvc3RNZXNzYWdlc1tDaGF0dHlIb3N0TWVzc2FnZXNbXCJNZXNzYWdlV2l0aFJlc3BvbnNlXCJdID0gMl0gPSBcIk1lc3NhZ2VXaXRoUmVzcG9uc2VcIjtcbiAgICAvKiogUmVzcG9uc2UgICovXG4gICAgQ2hhdHR5SG9zdE1lc3NhZ2VzW0NoYXR0eUhvc3RNZXNzYWdlc1tcIlJlc3BvbnNlXCJdID0gM10gPSBcIlJlc3BvbnNlXCI7XG4gICAgLyoqIEFzeW5jaHJvbm91cyBlcnJvciByZXNwb25zZSAqL1xuICAgIENoYXR0eUhvc3RNZXNzYWdlc1tDaGF0dHlIb3N0TWVzc2FnZXNbXCJSZXNwb25zZUVycm9yXCJdID0gNF0gPSBcIlJlc3BvbnNlRXJyb3JcIjtcbiAgICAvKiogQWJvcnQgbWVzc2FnZSAqL1xuICAgIENoYXR0eUhvc3RNZXNzYWdlc1tDaGF0dHlIb3N0TWVzc2FnZXNbXCJBYm9ydE1lc3NhZ2VcIl0gPSA1XSA9IFwiQWJvcnRNZXNzYWdlXCI7XG59KShDaGF0dHlIb3N0TWVzc2FnZXMgPSBleHBvcnRzLkNoYXR0eUhvc3RNZXNzYWdlcyB8fCAoZXhwb3J0cy5DaGF0dHlIb3N0TWVzc2FnZXMgPSB7fSkpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@looker/chatty/lib/host_messages.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@looker/chatty/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@looker/chatty/lib/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Chatty = exports.ChattyHostMessages = exports.ChattyClientMessages = exports.ChattyHostStates = exports.ChattyHost = exports.ChattyClientStates = exports.ChattyClient = exports.ChattyHostBuilder = exports.ChattyClientBuilder = void 0;\nvar client_builder_1 = __webpack_require__(/*! ./client_builder */ \"(ssr)/./node_modules/@looker/chatty/lib/client_builder.js\");\nvar host_builder_1 = __webpack_require__(/*! ./host_builder */ \"(ssr)/./node_modules/@looker/chatty/lib/host_builder.js\");\nvar client_builder_2 = __webpack_require__(/*! ./client_builder */ \"(ssr)/./node_modules/@looker/chatty/lib/client_builder.js\");\nObject.defineProperty(exports, \"ChattyClientBuilder\", ({ enumerable: true, get: function () { return client_builder_2.ChattyClientBuilder; } }));\nvar host_builder_2 = __webpack_require__(/*! ./host_builder */ \"(ssr)/./node_modules/@looker/chatty/lib/host_builder.js\");\nObject.defineProperty(exports, \"ChattyHostBuilder\", ({ enumerable: true, get: function () { return host_builder_2.ChattyHostBuilder; } }));\nvar client_1 = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/@looker/chatty/lib/client.js\");\nObject.defineProperty(exports, \"ChattyClient\", ({ enumerable: true, get: function () { return client_1.ChattyClient; } }));\nObject.defineProperty(exports, \"ChattyClientStates\", ({ enumerable: true, get: function () { return client_1.ChattyClientStates; } }));\nvar host_1 = __webpack_require__(/*! ./host */ \"(ssr)/./node_modules/@looker/chatty/lib/host.js\");\nObject.defineProperty(exports, \"ChattyHost\", ({ enumerable: true, get: function () { return host_1.ChattyHost; } }));\nObject.defineProperty(exports, \"ChattyHostStates\", ({ enumerable: true, get: function () { return host_1.ChattyHostStates; } }));\nvar client_messages_1 = __webpack_require__(/*! ./client_messages */ \"(ssr)/./node_modules/@looker/chatty/lib/client_messages.js\");\nObject.defineProperty(exports, \"ChattyClientMessages\", ({ enumerable: true, get: function () { return client_messages_1.ChattyClientMessages; } }));\nvar host_messages_1 = __webpack_require__(/*! ./host_messages */ \"(ssr)/./node_modules/@looker/chatty/lib/host_messages.js\");\nObject.defineProperty(exports, \"ChattyHostMessages\", ({ enumerable: true, get: function () { return host_messages_1.ChattyHostMessages; } }));\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@looker/chatty/lib/types.js\"), exports);\n/**\n * @class Chatty\n *\n * Primary interface for chatty. Provides methods for creating the chatty hosts and clients.\n */\nvar Chatty = /** @class */ (function () {\n    function Chatty() {\n    }\n    /**\n     * Creates a [[ChattyHostBuilder]] object. The builder presents a set of methods to configure\n     * and construct the host object.\n     *\n     * It is up to the client's webserver to return the correct headers to allow for parent/iframe\n     * communication. See\n     * [Window.postMessage()](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n     * for details.\n     *\n     * @param url The URL of the client iframe to create. The hosted iframe should create a chatty\n     * client to communicate with the host.\n     */\n    Chatty.createHost = function (url) {\n        return new host_builder_1.ChattyHostBuilder(url);\n    };\n    /**\n     * Creates a [[ChattyHostBuilder]] object. The builder presents a set of methods to configure\n     * and construct the host object.\n     *\n     * @param source The source of the client iframe to create. The hosted iframe should create a chatty\n     * client to communicate with the host.\n     */\n    Chatty.createHostFromSource = function (source) {\n        return new host_builder_1.ChattyHostBuilder(undefined, source);\n    };\n    /**\n     * Creates a [[ChattyClientBuilder]] object. The builder presents a set of methods to configure\n     * and construct the client object.\n     */\n    Chatty.createClient = function () {\n        return new client_builder_1.ChattyClientBuilder();\n    };\n    return Chatty;\n}());\nexports.Chatty = Chatty;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@looker/chatty/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@looker/chatty/lib/types.js":
/*!**************************************************!*\
  !*** ./node_modules/@looker/chatty/lib/types.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxvb2tlci9jaGF0dHkvbGliL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb21pbmEvRGVza3RvcC9sZWFmeUZhY3RvcnkvbGVhZnlfZmFjdG9yeS9mcm9udGVuZC9zcmMvbm9kZV9tb2R1bGVzL0Bsb29rZXIvY2hhdHR5L2xpYi90eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG5cbiBNSVQgTGljZW5zZVxuXG4gQ29weXJpZ2h0IChjKSAyMDIxIExvb2tlciBEYXRhIFNjaWVuY2VzLCBJbmMuXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiBTT0ZUV0FSRS5cblxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@looker/chatty/lib/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@looker/chatty/node_modules/debug/src/browser.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@looker/chatty/node_modules/debug/src/browser.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = __webpack_require__(/*! ./debug */ \"(ssr)/./node_modules/@looker/chatty/node_modules/debug/src/debug.js\");\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@looker/chatty/node_modules/debug/src/browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@looker/chatty/node_modules/debug/src/debug.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@looker/chatty/node_modules/debug/src/debug.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = __webpack_require__(/*! ms */ \"(ssr)/./node_modules/@looker/chatty/node_modules/ms/index.js\");\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxvb2tlci9jaGF0dHkvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYztBQUNkLGVBQWU7QUFDZixjQUFjO0FBQ2QsZUFBZTtBQUNmLGdIQUFnQzs7QUFFaEM7QUFDQTtBQUNBOztBQUVBLGFBQWE7QUFDYixhQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCOztBQUVsQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsRUFBRSxhQUFhO0FBQ2YsRUFBRSxhQUFhOztBQUVmO0FBQ0E7O0FBRUEsa0JBQWtCLFNBQVM7QUFDM0IsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBDQUEwQyxTQUFTO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFNBQVM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3JvbWluYS9EZXNrdG9wL2xlYWZ5RmFjdG9yeS9sZWFmeV9mYWN0b3J5L2Zyb250ZW5kL3NyYy9ub2RlX21vZHVsZXMvQGxvb2tlci9jaGF0dHkvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBQcmV2aW91cyBsb2cgdGltZXN0YW1wLlxuICovXG5cbnZhciBwcmV2VGltZTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgLy8gZGlzYWJsZWQ/XG4gICAgaWYgKCFkZWJ1Zy5lbmFibGVkKSByZXR1cm47XG5cbiAgICB2YXIgc2VsZiA9IGRlYnVnO1xuXG4gICAgLy8gc2V0IGBkaWZmYCB0aW1lc3RhbXBcbiAgICB2YXIgY3VyciA9ICtuZXcgRGF0ZSgpO1xuICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgc2VsZi5kaWZmID0gbXM7XG4gICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG4gICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICBwcmV2VGltZSA9IGN1cnI7XG5cbiAgICAvLyB0dXJuIHRoZSBgYXJndW1lbnRzYCBpbnRvIGEgcHJvcGVyIEFycmF5XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblxuICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG4gICAgICBhcmdzLnVuc2hpZnQoJyVPJyk7XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCBmdW5jdGlvbihtYXRjaCwgZm9ybWF0KSB7XG4gICAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG4gICAgICBpZiAobWF0Y2ggPT09ICclJScpIHJldHVybiBtYXRjaDtcbiAgICAgIGluZGV4Kys7XG4gICAgICB2YXIgZm9ybWF0dGVyID0gZXhwb3J0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZvcm1hdHRlcikge1xuICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuICAgICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG4gICAgICAgIGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIC8vIGFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG4gICAgZXhwb3J0cy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cbiAgICB2YXIgbG9nRm4gPSBkZWJ1Zy5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuXG4gIGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgZGVidWcuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpO1xuICBkZWJ1Zy51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICBkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG4vKipcbiAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgZXhwb3J0cy5zYXZlKG5hbWVzcGFjZXMpO1xuXG4gIGV4cG9ydHMubmFtZXMgPSBbXTtcbiAgZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gIGV4cG9ydHMuZW5hYmxlKCcnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDb2VyY2UgYHZhbGAuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICByZXR1cm4gdmFsO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@looker/chatty/node_modules/debug/src/debug.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@looker/chatty/node_modules/debug/src/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@looker/chatty/node_modules/debug/src/index.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Detect Electron renderer process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process !== 'undefined' && process.type === 'renderer') {\n  module.exports = __webpack_require__(/*! ./browser.js */ \"(ssr)/./node_modules/@looker/chatty/node_modules/debug/src/browser.js\");\n} else {\n  module.exports = __webpack_require__(/*! ./node.js */ \"(ssr)/./node_modules/@looker/chatty/node_modules/debug/src/node.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxvb2tlci9jaGF0dHkvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUUsaUlBQXdDO0FBQzFDLEVBQUU7QUFDRixFQUFFLDJIQUFxQztBQUN2QyIsInNvdXJjZXMiOlsiL1VzZXJzL3JvbWluYS9EZXNrdG9wL2xlYWZ5RmFjdG9yeS9sZWFmeV9mYWN0b3J5L2Zyb250ZW5kL3NyYy9ub2RlX21vZHVsZXMvQGxvb2tlci9jaGF0dHkvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERldGVjdCBFbGVjdHJvbiByZW5kZXJlciBwcm9jZXNzLCB3aGljaCBpcyBub2RlLCBidXQgd2Ugc2hvdWxkXG4gKiB0cmVhdCBhcyBhIGJyb3dzZXIuXG4gKi9cblxuaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Jyb3dzZXIuanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9ub2RlLmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@looker/chatty/node_modules/debug/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@looker/chatty/node_modules/debug/src/node.js":
/*!********************************************************************!*\
  !*** ./node_modules/@looker/chatty/node_modules/debug/src/node.js ***!
  \********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * Module dependencies.\n */\n\nvar tty = __webpack_require__(/*! tty */ \"tty\");\nvar util = __webpack_require__(/*! util */ \"util\");\n\n/**\n * This is the Node.js implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = __webpack_require__(/*! ./debug */ \"(ssr)/./node_modules/@looker/chatty/node_modules/debug/src/debug.js\");\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(function (key) {\n  return /^debug_/i.test(key);\n}).reduce(function (obj, key) {\n  // camel-case\n  var prop = key\n    .substring(6)\n    .toLowerCase()\n    .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });\n\n  // coerce string value into JS value\n  var val = process.env[key];\n  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;\n  else if (/^(no|off|false|disabled)$/i.test(val)) val = false;\n  else if (val === 'null') val = null;\n  else val = Number(val);\n\n  obj[prop] = val;\n  return obj;\n}, {});\n\n/**\n * The file descriptor to write the `debug()` calls to.\n * Set the `DEBUG_FD` env variable to override with another value. i.e.:\n *\n *   $ DEBUG_FD=3 node script.js 3>debug.log\n */\n\nvar fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n\nif (1 !== fd && 2 !== fd) {\n  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()\n}\n\nvar stream = 1 === fd ? process.stdout :\n             2 === fd ? process.stderr :\n             createWritableStdioStream(fd);\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n  return 'colors' in exports.inspectOpts\n    ? Boolean(exports.inspectOpts.colors)\n    : tty.isatty(fd);\n}\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nexports.formatters.o = function(v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts)\n    .split('\\n').map(function(str) {\n      return str.trim()\n    }).join(' ');\n};\n\n/**\n * Map %o to `util.inspect()`, allowing multiple lines if needed.\n */\n\nexports.formatters.O = function(v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts);\n};\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var name = this.namespace;\n  var useColors = this.useColors;\n\n  if (useColors) {\n    var c = this.color;\n    var prefix = '  \\u001b[3' + c + ';1m' + name + ' ' + '\\u001b[0m';\n\n    args[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n    args.push('\\u001b[3' + c + 'm+' + exports.humanize(this.diff) + '\\u001b[0m');\n  } else {\n    args[0] = new Date().toUTCString()\n      + ' ' + name + ' ' + args[0];\n  }\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to `stream`.\n */\n\nfunction log() {\n  return stream.write(util.format.apply(util, arguments) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  if (null == namespaces) {\n    // If you set a process.env field to null or undefined, it gets cast to the\n    // string 'null' or 'undefined'. Just delete instead.\n    delete process.env.DEBUG;\n  } else {\n    process.env.DEBUG = namespaces;\n  }\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  return process.env.DEBUG;\n}\n\n/**\n * Copied from `node/src/node.js`.\n *\n * XXX: It's lame that node doesn't expose this API out-of-the-box. It also\n * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.\n */\n\nfunction createWritableStdioStream (fd) {\n  var stream;\n  var tty_wrap = process.binding('tty_wrap');\n\n  // Note stream._type is used for test-module-load-list.js\n\n  switch (tty_wrap.guessHandleType(fd)) {\n    case 'TTY':\n      stream = new tty.WriteStream(fd);\n      stream._type = 'tty';\n\n      // Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n      break;\n\n    case 'FILE':\n      var fs = __webpack_require__(/*! fs */ \"fs\");\n      stream = new fs.SyncWriteStream(fd, { autoClose: false });\n      stream._type = 'fs';\n      break;\n\n    case 'PIPE':\n    case 'TCP':\n      var net = __webpack_require__(/*! net */ \"net\");\n      stream = new net.Socket({\n        fd: fd,\n        readable: false,\n        writable: true\n      });\n\n      // FIXME Should probably have an option in net.Socket to create a\n      // stream from an existing fd which is writable only. But for now\n      // we'll just add this hack and set the `readable` member to false.\n      // Test: ./node test/fixtures/echo.js < /etc/passwd\n      stream.readable = false;\n      stream.read = null;\n      stream._type = 'pipe';\n\n      // FIXME Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n      break;\n\n    default:\n      // Probably an error on in uv_guess_handle()\n      throw new Error('Implement me. Unknown stream file type!');\n  }\n\n  // For supporting legacy API we put the FD here.\n  stream.fd = fd;\n\n  stream._isStdio = true;\n\n  return stream;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init (debug) {\n  debug.inspectOpts = {};\n\n  var keys = Object.keys(exports.inspectOpts);\n  for (var i = 0; i < keys.length; i++) {\n    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n  }\n}\n\n/**\n * Enable namespaces listed in `process.env.DEBUG` initially.\n */\n\nexports.enable(load());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@looker/chatty/node_modules/debug/src/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@looker/chatty/node_modules/ms/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@looker/chatty/node_modules/ms/index.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxvb2tlci9jaGF0dHkvbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLFdBQVcsUUFBUTtBQUNuQixZQUFZLE9BQU87QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3JvbWluYS9EZXNrdG9wL2xlYWZ5RmFjdG9yeS9sZWFmeV9mYWN0b3J5L2Zyb250ZW5kL3NyYy9ub2RlX21vZHVsZXMvQGxvb2tlci9jaGF0dHkvbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIGlmIChtcyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtcyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICByZXR1cm4gcGx1cmFsKG1zLCBkLCAnZGF5JykgfHxcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcbiAgICBwbHVyYWwobXMsIG0sICdtaW51dGUnKSB8fFxuICAgIHBsdXJhbChtcywgcywgJ3NlY29uZCcpIHx8XG4gICAgbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG4sIG5hbWUpIHtcbiAgaWYgKG1zIDwgbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobXMgPCBuICogMS41KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XG4gIH1cbiAgcmV0dXJuIE1hdGguY2VpbChtcyAvIG4pICsgJyAnICsgbmFtZSArICdzJztcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@looker/chatty/node_modules/ms/index.js\n");

/***/ })

};
;